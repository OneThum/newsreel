{"created": 1761449291.8283892, "duration": 2.4745090007781982, "exitcode": 1, "root": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests", "environment": {}, "summary": {"passed": 100, "failed": 14, "skipped": 9, "total": 123, "collected": 123}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "integration/__init__.py", "type": "Package"}, {"nodeid": "system/test_deployed_api.py", "type": "Module"}, {"nodeid": "unit/test_clustering_logic.py", "type": "Module"}, {"nodeid": "unit/test_rss_parsing.py", "type": "Module"}]}, {"nodeid": "integration/test_batch_processing.py::TestBatchSubmission", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_creation_from_unsummarized_stories", "type": "Function", "lineno": 21}, {"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_size_limits", "type": "Function", "lineno": 49}, {"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_request_format", "type": "Function", "lineno": 71}]}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_status_polling", "type": "Function", "lineno": 104}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_completion_detection", "type": "Function", "lineno": 119}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_result_extraction", "type": "Function", "lineno": 134}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_partial_batch_failure_handling", "type": "Function", "lineno": 155}]}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_batch_cost_calculation", "type": "Function", "lineno": 179}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_batch_vs_realtime_cost_savings", "type": "Function", "lineno": 190}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_monthly_cost_projection", "type": "Function", "lineno": 209}]}, {"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End::test_complete_batch_workflow", "type": "Function", "lineno": 229}, {"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End::test_batch_retry_on_failure", "type": "Function", "lineno": 268}]}, {"nodeid": "integration/test_batch_processing.py::TestBatchPerformance", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchPerformance::test_batch_processing_latency", "type": "Function", "lineno": 294}, {"nodeid": "integration/test_batch_processing.py::TestBatchPerformance::test_batch_throughput", "type": "Function", "lineno": 307}]}, {"nodeid": "integration/test_batch_processing.py", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py::TestBatchSubmission", "type": "Class"}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing", "type": "Class"}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking", "type": "Class"}, {"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End", "type": "Class"}, {"nodeid": "integration/test_batch_processing.py::TestBatchPerformance", "type": "Class"}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_verified_to_breaking_transition", "type": "Function", "lineno": 21}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_monitoring_to_breaking_skip_developing", "type": "Function", "lineno": 50}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_breaking_news_not_triggered_for_slow_stories", "type": "Function", "lineno": 72}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_triggered_on_breaking_status", "type": "Function", "lineno": 98}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_payload_structure", "type": "Function", "lineno": 118}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_deduplication", "type": "Function", "lineno": 142}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_rate_limiting", "type": "Function", "lineno": 159}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_breaking_to_verified_demotion", "type": "Function", "lineno": 182}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_verified_to_archived_lifecycle", "type": "Function", "lineno": 201}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_complete_story_lifecycle_flow", "type": "Function", "lineno": 221}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration::test_twitter_trending_check", "type": "Function", "lineno": 267}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration::test_twitter_volume_threshold", "type": "Function", "lineno": 287}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance::test_breaking_news_detection_latency", "type": "Function", "lineno": 306}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance::test_notification_send_latency", "type": "Function", "lineno": 333}]}, {"nodeid": "integration/test_breaking_news_lifecycle.py", "outcome": "passed", "result": [{"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection", "type": "Class"}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications", "type": "Class"}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle", "type": "Class"}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration", "type": "Class"}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance", "type": "Class"}]}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow", "outcome": "passed", "result": [{"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_verified_story_triggers_summarization", "type": "Function", "lineno": 21}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_developing_story_no_summarization", "type": "Function", "lineno": 37}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_summary_prompt_construction", "type": "Function", "lineno": 55}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_summary_stored_in_cluster", "type": "Function", "lineno": 83}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_headline_regeneration_on_source_addition", "type": "Function", "lineno": 99}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_cost_tracking_for_summarization", "type": "Function", "lineno": 122}]}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow", "outcome": "passed", "result": [{"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_real_time_summarization_flow", "type": "Function", "lineno": 146}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_batch_summarization_flow", "type": "Function", "lineno": 163}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_batch_result_processing", "type": "Function", "lineno": 178}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_summary_fallback_on_ai_refusal", "type": "Function", "lineno": 194}]}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality", "outcome": "passed", "result": [{"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_length_validation", "type": "Function", "lineno": 219}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_includes_key_information", "type": "Function", "lineno": 231}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_prompt_cache_usage", "type": "Function", "lineno": 248}]}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance", "outcome": "passed", "result": [{"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance::test_batch_vs_realtime_cost", "type": "Function", "lineno": 267}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance::test_summarization_rate_limit", "type": "Function", "lineno": 284}]}, {"nodeid": "integration/test_clustering_to_summarization.py", "outcome": "passed", "result": [{"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow", "type": "Class"}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow", "type": "Class"}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality", "type": "Class"}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance", "type": "Class"}]}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow", "outcome": "passed", "result": [{"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_new_article_creates_new_cluster", "type": "Function", "lineno": 27}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_similar_article_clusters_with_existing", "type": "Function", "lineno": 94}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_duplicate_source_prevented", "type": "Function", "lineno": 132}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_cross_category_clustering_prevented", "type": "Function", "lineno": 165}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_entity_based_matching", "type": "Function", "lineno": 187}]}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline", "outcome": "passed", "result": [{"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_full_rss_to_cluster_pipeline", "type": "Function", "lineno": 219}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_multiple_articles_same_story", "type": "Function", "lineno": 258}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_story_status_progression", "type": "Function", "lineno": 289}]}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality", "outcome": "passed", "result": [{"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_invalid_feed_handling", "type": "Function", "lineno": 319}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_missing_required_fields", "type": "Function", "lineno": 332}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_html_cleaning_in_pipeline", "type": "Function", "lineno": 348}]}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance", "outcome": "passed", "result": [{"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance::test_clustering_100_articles", "type": "Function", "lineno": 370}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance::test_fuzzy_matching_performance", "type": "Function", "lineno": 399}]}, {"nodeid": "integration/test_rss_to_clustering.py", "outcome": "passed", "result": [{"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow", "type": "Class"}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline", "type": "Class"}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality", "type": "Class"}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance", "type": "Class"}]}, {"nodeid": "integration/__init__.py", "outcome": "passed", "result": [{"nodeid": "integration/test_batch_processing.py", "type": "Module"}, {"nodeid": "integration/test_breaking_news_lifecycle.py", "type": "Module"}, {"nodeid": "integration/test_clustering_to_summarization.py", "type": "Module"}, {"nodeid": "integration/test_rss_to_clustering.py", "type": "Module"}]}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_api_is_reachable", "type": "Function", "lineno": 24}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_stories_endpoint_returns_data", "type": "Function", "lineno": 32}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_stories_are_recent", "type": "Function", "lineno": 52}]}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_articles_are_being_ingested", "type": "Function", "lineno": 91}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_rss_ingestion_rate", "type": "Function", "lineno": 120}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_multiple_sources_being_ingested", "type": "Function", "lineno": 148}]}, {"nodeid": "system/test_deployed_api.py::TestStoryClustering", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestStoryClustering::test_stories_are_being_created", "type": "Function", "lineno": 191}, {"nodeid": "system/test_deployed_api.py::TestStoryClustering::test_stories_have_multiple_sources", "type": "Function", "lineno": 216}]}, {"nodeid": "system/test_deployed_api.py::TestAISummarization", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestAISummarization::test_summaries_are_being_generated", "type": "Function", "lineno": 263}, {"nodeid": "system/test_deployed_api.py::TestAISummarization::test_summary_coverage_rate", "type": "Function", "lineno": 289}]}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_function_app_is_deployed", "type": "Function", "lineno": 338}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_rss_function_is_running", "type": "Function", "lineno": 352}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_clustering_function_is_running", "type": "Function", "lineno": 358}]}, {"nodeid": "system/test_deployed_api.py", "outcome": "passed", "result": [{"nodeid": "system/test_deployed_api.py::TestDeployedAPI", "type": "Class"}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion", "type": "Class"}, {"nodeid": "system/test_deployed_api.py::TestStoryClustering", "type": "Class"}, {"nodeid": "system/test_deployed_api.py::TestAISummarization", "type": "Class"}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions", "type": "Class"}]}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_identical_titles_high_similarity", "type": "Function", "lineno": 17}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_very_similar_titles", "type": "Function", "lineno": 23}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_related_but_different_titles", "type": "Function", "lineno": 30}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_unrelated_titles_low_similarity", "type": "Function", "lineno": 37}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_completely_different_titles", "type": "Function", "lineno": 44}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_with_word_order_change", "type": "Function", "lineno": 51}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_case_insensitive", "type": "Function", "lineno": 58}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_with_extra_words", "type": "Function", "lineno": 65}]}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_crime_vs_health_conflict", "type": "Function", "lineno": 78}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_politics_vs_sports_conflict", "type": "Function", "lineno": 84}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_business_vs_weather_conflict", "type": "Function", "lineno": 90}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_same_topic_no_conflict", "type": "Function", "lineno": 96}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_no_topic_keywords_no_conflict", "type": "Function", "lineno": 102}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_one_topic_vs_none_no_conflict", "type": "Function", "lineno": 108}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_medical_vs_political_conflict", "type": "Function", "lineno": 114}]}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds::test_threshold_75_percent", "type": "Function", "lineno": 125}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds::test_edge_cases_near_threshold", "type": "Function", "lineno": 145}]}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_exact_match_via_fingerprint", "type": "Function", "lineno": 160}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_fuzzy_match_required_for_variations", "type": "Function", "lineno": 175}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_no_match_for_different_events", "type": "Function", "lineno": 184}]}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_extract_source_from_article_id", "type": "Function", "lineno": 199}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_identify_duplicate_sources_in_cluster", "type": "Function", "lineno": 205}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_unique_sources_only", "type": "Function", "lineno": 224}]}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance::test_similarity_calculation_is_fast", "type": "Function", "lineno": 242}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance::test_topic_conflict_check_is_fast", "type": "Function", "lineno": 257}]}, {"nodeid": "unit/test_clustering_logic.py", "outcome": "passed", "result": [{"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity", "type": "Class"}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection", "type": "Class"}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds", "type": "Class"}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching", "type": "Class"}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention", "type": "Class"}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance", "type": "Class"}]}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_simple_html", "type": "Function", "lineno": 22}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_nested_html", "type": "Function", "lineno": 28}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_html_entities", "type": "Function", "lineno": 34}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_with_newlines", "type": "Function", "lineno": 41}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_empty_html", "type": "Function", "lineno": 48}]}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_location_entities", "type": "Function", "lineno": 59}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_from_empty_text", "type": "Function", "lineno": 71}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_with_special_characters", "type": "Function", "lineno": 76}]}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_tech_article", "type": "Function", "lineno": 87}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_business_article", "type": "Function", "lineno": 94}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_health_article", "type": "Function", "lineno": 101}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_sports_article", "type": "Function", "lineno": 108}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_fallback_to_general", "type": "Function", "lineno": 115}]}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_detect_product_spam", "type": "Function", "lineno": 127}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_detect_sponsored_content", "type": "Function", "lineno": 134}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_legitimate_article_not_spam", "type": "Function", "lineno": 141}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_news_about_products_not_spam", "type": "Function", "lineno": 148}]}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_long_text", "type": "Function", "lineno": 162}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_short_text_unchanged", "type": "Function", "lineno": 168}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_at_word_boundary", "type": "Function", "lineno": 174}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_empty_text", "type": "Function", "lineno": 181}]}, {"nodeid": "unit/test_rss_parsing.py::TestIDGeneration", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestIDGeneration::test_generate_article_id", "type": "Function", "lineno": 191}, {"nodeid": "unit/test_rss_parsing.py::TestIDGeneration::test_generate_different_ids_for_different_urls", "type": "Function", "lineno": 206}]}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_generate_story_fingerprint", "type": "Function", "lineno": 222}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_consistency", "type": "Function", "lineno": 237}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_different_for_different_titles", "type": "Function", "lineno": 246}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_normalizes_case", "type": "Function", "lineno": 256}]}, {"nodeid": "unit/test_rss_parsing.py::TestDateParsing", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestDateParsing::test_parse_rfc822_date", "type": "Function", "lineno": 271}, {"nodeid": "unit/test_rss_parsing.py::TestDateParsing::test_parse_missing_date_returns_now", "type": "Function", "lineno": 284}]}, {"nodeid": "unit/test_rss_parsing.py", "outcome": "passed", "result": [{"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestIDGeneration", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting", "type": "Class"}, {"nodeid": "unit/test_rss_parsing.py::TestDateParsing", "type": "Class"}]}], "tests": [{"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_creation_from_unsummarized_stories", "lineno": 21, "outcome": "passed", "keywords": ["test_batch_creation_from_unsummarized_stories", "asyncio", "pytestmark", "integration", "TestBatchSubmission", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.003199667000000017, "outcome": "passed"}, "call": {"duration": 0.0002606249999999588, "outcome": "passed"}, "teardown": {"duration": 0.00010329199999997707, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_size_limits", "lineno": 49, "outcome": "passed", "keywords": ["test_batch_size_limits", "asyncio", "pytestmark", "integration", "TestBatchSubmission", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016182079999999543, "outcome": "passed"}, "call": {"duration": 0.00014645799999996045, "outcome": "passed"}, "teardown": {"duration": 9.320800000001128e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchSubmission::test_batch_request_format", "lineno": 71, "outcome": "failed", "keywords": ["test_batch_request_format", "asyncio", "pytestmark", "integration", "TestBatchSubmission", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001790829999999688, "outcome": "passed"}, "call": {"duration": 0.00022308399999998452, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_batch_processing.py", "lineno": 95, "message": "AssertionError: assert 3 == 5\n +  where 3 = len([{'custom_id': 'story_1', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_1', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}, {'custom_id': 'story_2', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_2', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}, {'custom_id': 'story_3', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_3', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}])"}, "traceback": [{"path": "integration/test_batch_processing.py", "lineno": 95, "message": "in test_batch_request_format"}], "longrepr": "integration/test_batch_processing.py:95: in test_batch_request_format\n    assert len(anthropic_requests) == 5\nE   AssertionError: assert 3 == 5\nE    +  where 3 = len([{'custom_id': 'story_1', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_1', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}, {'custom_id': 'story_2', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_2', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}, {'custom_id': 'story_3', 'params': {'max_tokens': 300, 'messages': [{'content': 'Summarize story story_3', 'role': 'user'}], 'model': 'claude-3-5-haiku-20241022'}}])"}, "teardown": {"duration": 0.00015170799999997264, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_status_polling", "lineno": 104, "outcome": "passed", "keywords": ["test_batch_status_polling", "asyncio", "pytestmark", "integration", "TestBatchProcessing", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0017777499999999669, "outcome": "passed"}, "call": {"duration": 0.0001471250000000257, "outcome": "passed"}, "teardown": {"duration": 9.537500000000865e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_completion_detection", "lineno": 119, "outcome": "failed", "keywords": ["test_batch_completion_detection", "asyncio", "pytestmark", "integration", "TestBatchProcessing", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0017001249999999968, "outcome": "passed"}, "call": {"duration": 0.00012449999999997186, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_batch_processing.py", "lineno": 133, "message": "KeyError: 'succeeded_count'"}, "traceback": [{"path": "integration/test_batch_processing.py", "lineno": 133, "message": "in test_batch_completion_detection"}], "longrepr": "integration/test_batch_processing.py:133: in test_batch_completion_detection\n    assert batch['succeeded_count'] == 3\nE   KeyError: 'succeeded_count'"}, "teardown": {"duration": 9.537500000000865e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_batch_result_extraction", "lineno": 134, "outcome": "failed", "keywords": ["test_batch_result_extraction", "asyncio", "pytestmark", "integration", "TestBatchProcessing", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00017083299999998136, "outcome": "passed"}, "call": {"duration": 0.00012341699999995903, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_batch_processing.py", "lineno": 146, "message": "KeyError: 'message'"}, "traceback": [{"path": "integration/test_batch_processing.py", "lineno": 146, "message": "in test_batch_result_extraction"}], "longrepr": "integration/test_batch_processing.py:146: in test_batch_result_extraction\n    summary_text = result['result']['message']['content'][0]['text']\nE   KeyError: 'message'"}, "teardown": {"duration": 8.974999999999955e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchProcessing::test_partial_batch_failure_handling", "lineno": 155, "outcome": "passed", "keywords": ["test_partial_batch_failure_handling", "asyncio", "pytestmark", "integration", "TestBatchProcessing", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00014045899999998168, "outcome": "passed"}, "call": {"duration": 0.00011962500000001208, "outcome": "passed"}, "teardown": {"duration": 8.920900000003451e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_batch_cost_calculation", "lineno": 179, "outcome": "failed", "keywords": ["test_batch_cost_calculation", "asyncio", "pytestmark", "integration", "TestBatchCostTracking", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00015899999999996473, "outcome": "passed"}, "call": {"duration": 0.0001627499999999893, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_batch_processing.py", "lineno": 187, "message": "AssertionError: assert 'total_cost' in {'id': 'batch_req_123', 'results': [{'custom_id': 'story_1', 'result': {'type': 'succeeded'}}], 'status': 'completed'}"}, "traceback": [{"path": "integration/test_batch_processing.py", "lineno": 187, "message": "in test_batch_cost_calculation"}], "longrepr": "integration/test_batch_processing.py:187: in test_batch_cost_calculation\n    assert 'total_cost' in batch\nE   AssertionError: assert 'total_cost' in {'id': 'batch_req_123', 'results': [{'custom_id': 'story_1', 'result': {'type': 'succeeded'}}], 'status': 'completed'}"}, "teardown": {"duration": 8.87920000000042e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_batch_vs_realtime_cost_savings", "lineno": 190, "outcome": "passed", "keywords": ["test_batch_vs_realtime_cost_savings", "asyncio", "pytestmark", "integration", "TestBatchCostTracking", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00014291600000004845, "outcome": "passed"}, "call": {"duration": 0.00011370799999999015, "outcome": "passed"}, "teardown": {"duration": 8.43750000000254e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchCostTracking::test_monthly_cost_projection", "lineno": 209, "outcome": "passed", "keywords": ["test_monthly_cost_projection", "asyncio", "pytestmark", "integration", "TestBatchCostTracking", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001331250000000117, "outcome": "passed"}, "call": {"duration": 0.00011016699999999435, "outcome": "passed"}, "teardown": {"duration": 8.129200000001058e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End::test_complete_batch_workflow", "lineno": 229, "outcome": "passed", "keywords": ["test_complete_batch_workflow", "asyncio", "pytestmark", "integration", "TestBatchWorkflowEnd2End", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016490419999999895, "outcome": "passed"}, "call": {"duration": 0.00014658300000003344, "outcome": "passed"}, "teardown": {"duration": 9.383299999998762e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchWorkflowEnd2End::test_batch_retry_on_failure", "lineno": 268, "outcome": "passed", "keywords": ["test_batch_retry_on_failure", "asyncio", "pytestmark", "integration", "TestBatchWorkflowEnd2End", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001339169999999834, "outcome": "passed"}, "call": {"duration": 0.00011458400000002866, "outcome": "passed"}, "teardown": {"duration": 7.691600000003795e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchPerformance::test_batch_processing_latency", "lineno": 294, "outcome": "passed", "keywords": ["test_batch_processing_latency", "asyncio", "pytestmark", "integration", "TestBatchPerformance", "slow", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00013299999999999423, "outcome": "passed"}, "call": {"duration": 0.00011583399999998134, "outcome": "passed"}, "teardown": {"duration": 8.120900000002651e-05, "outcome": "passed"}}, {"nodeid": "integration/test_batch_processing.py::TestBatchPerformance::test_batch_throughput", "lineno": 307, "outcome": "passed", "keywords": ["test_batch_throughput", "asyncio", "pytestmark", "integration", "TestBatchPerformance", "slow", "test_batch_processing.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00014204200000000888, "outcome": "passed"}, "call": {"duration": 0.00010804200000003039, "outcome": "passed"}, "teardown": {"duration": 8.141699999997254e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_verified_to_breaking_transition", "lineno": 21, "outcome": "failed", "keywords": ["test_verified_to_breaking_transition", "asyncio", "pytestmark", "integration", "TestBreakingNewsDetection", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016646670000000086, "outcome": "passed"}, "call": {"duration": 0.00012508399999999753, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_breaking_news_lifecycle.py", "lineno": 41, "message": "KeyError: 'first_seen'"}, "traceback": [{"path": "integration/test_breaking_news_lifecycle.py", "lineno": 41, "message": "in test_verified_to_breaking_transition"}], "longrepr": "integration/test_breaking_news_lifecycle.py:41: in test_verified_to_breaking_transition\n    first_seen = datetime.fromisoformat(story['first_seen'].replace('Z', '+00:00'))\nE   KeyError: 'first_seen'"}, "teardown": {"duration": 8.583399999995134e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_monitoring_to_breaking_skip_developing", "lineno": 50, "outcome": "passed", "keywords": ["test_monitoring_to_breaking_skip_developing", "asyncio", "pytestmark", "integration", "TestBreakingNewsDetection", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0015759579999999884, "outcome": "passed"}, "call": {"duration": 0.00011854099999997203, "outcome": "passed"}, "teardown": {"duration": 9.329200000002258e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsDetection::test_breaking_news_not_triggered_for_slow_stories", "lineno": 72, "outcome": "passed", "keywords": ["test_breaking_news_not_triggered_for_slow_stories", "asyncio", "pytestmark", "integration", "TestBreakingNewsDetection", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016731249999999975, "outcome": "passed"}, "call": {"duration": 0.00012766600000002626, "outcome": "passed"}, "teardown": {"duration": 8.766700000001348e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_triggered_on_breaking_status", "lineno": 98, "outcome": "passed", "keywords": ["test_notification_triggered_on_breaking_status", "asyncio", "pytestmark", "integration", "TestBreakingNewsNotifications", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016453339999999983, "outcome": "passed"}, "call": {"duration": 0.0001195419999999725, "outcome": "passed"}, "teardown": {"duration": 9.020800000003604e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_payload_structure", "lineno": 118, "outcome": "passed", "keywords": ["test_notification_payload_structure", "asyncio", "pytestmark", "integration", "TestBreakingNewsNotifications", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00016891699999999066, "outcome": "passed"}, "call": {"duration": 0.00011345899999998244, "outcome": "passed"}, "teardown": {"duration": 8.725000000003869e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_deduplication", "lineno": 142, "outcome": "passed", "keywords": ["test_notification_deduplication", "asyncio", "pytestmark", "integration", "TestBreakingNewsNotifications", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016597500000000154, "outcome": "passed"}, "call": {"duration": 0.00011395899999999681, "outcome": "passed"}, "teardown": {"duration": 8.80000000000325e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsNotifications::test_notification_rate_limiting", "lineno": 159, "outcome": "passed", "keywords": ["test_notification_rate_limiting", "asyncio", "pytestmark", "integration", "TestBreakingNewsNotifications", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00013774999999999205, "outcome": "passed"}, "call": {"duration": 0.0001082909999999826, "outcome": "passed"}, "teardown": {"duration": 8.295799999996634e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_breaking_to_verified_demotion", "lineno": 182, "outcome": "failed", "keywords": ["test_breaking_to_verified_demotion", "asyncio", "pytestmark", "integration", "TestBreakingNewsLifecycle", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.002137, "outcome": "passed"}, "call": {"duration": 0.00012183300000001562, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_breaking_news_lifecycle.py", "lineno": 189, "message": "KeyError: 'breaking_triggered_at'"}, "traceback": [{"path": "integration/test_breaking_news_lifecycle.py", "lineno": 189, "message": "in test_breaking_to_verified_demotion"}], "longrepr": "integration/test_breaking_news_lifecycle.py:189: in test_breaking_to_verified_demotion\n    story['breaking_triggered_at'].replace('Z', '+00:00')\nE   KeyError: 'breaking_triggered_at'"}, "teardown": {"duration": 0.00012283299999998887, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_verified_to_archived_lifecycle", "lineno": 201, "outcome": "passed", "keywords": ["test_verified_to_archived_lifecycle", "asyncio", "pytestmark", "integration", "TestBreakingNewsLifecycle", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016468329999999587, "outcome": "passed"}, "call": {"duration": 0.00015812500000000895, "outcome": "passed"}, "teardown": {"duration": 0.00010050000000000336, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsLifecycle::test_complete_story_lifecycle_flow", "lineno": 221, "outcome": "passed", "keywords": ["test_complete_story_lifecycle_flow", "asyncio", "pytestmark", "integration", "TestBreakingNewsLifecycle", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0017098339999999657, "outcome": "passed"}, "call": {"duration": 0.0001379169999999874, "outcome": "passed"}, "teardown": {"duration": 9.920800000001728e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration::test_twitter_trending_check", "lineno": 267, "outcome": "passed", "keywords": ["test_twitter_trending_check", "asyncio", "pytestmark", "integration", "TestTwitterBreakingNewsIntegration", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00016262499999997182, "outcome": "passed"}, "call": {"duration": 0.0001162909999999906, "outcome": "passed"}, "teardown": {"duration": 8.67079999999909e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestTwitterBreakingNewsIntegration::test_twitter_volume_threshold", "lineno": 287, "outcome": "passed", "keywords": ["test_twitter_volume_threshold", "asyncio", "pytestmark", "integration", "TestTwitterBreakingNewsIntegration", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001411250000000197, "outcome": "passed"}, "call": {"duration": 0.0001123749999999979, "outcome": "passed"}, "teardown": {"duration": 8.550000000001612e-05, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance::test_breaking_news_detection_latency", "lineno": 306, "outcome": "passed", "keywords": ["test_breaking_news_detection_latency", "asyncio", "pytestmark", "integration", "TestBreakingNewsPerformance", "slow", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0019142079999999728, "outcome": "passed"}, "call": {"duration": 0.00018804100000002766, "outcome": "passed"}, "teardown": {"duration": 0.00010508300000000581, "outcome": "passed"}}, {"nodeid": "integration/test_breaking_news_lifecycle.py::TestBreakingNewsPerformance::test_notification_send_latency", "lineno": 333, "outcome": "passed", "keywords": ["test_notification_send_latency", "asyncio", "pytestmark", "integration", "TestBreakingNewsPerformance", "slow", "test_breaking_news_lifecycle.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00016933299999999374, "outcome": "passed"}, "call": {"duration": 0.00013058300000001744, "outcome": "passed"}, "teardown": {"duration": 8.87920000000042e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_verified_story_triggers_summarization", "lineno": 21, "outcome": "passed", "keywords": ["test_verified_story_triggers_summarization", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0023008750000000355, "outcome": "passed"}, "call": {"duration": 0.00012650000000002937, "outcome": "passed"}, "teardown": {"duration": 9.325000000004469e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_developing_story_no_summarization", "lineno": 37, "outcome": "passed", "keywords": ["test_developing_story_no_summarization", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016256250000000194, "outcome": "passed"}, "call": {"duration": 0.00011812499999996895, "outcome": "passed"}, "teardown": {"duration": 9.108299999999181e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_summary_prompt_construction", "lineno": 55, "outcome": "passed", "keywords": ["test_summary_prompt_construction", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00016216599999996362, "outcome": "passed"}, "call": {"duration": 0.00012191599999999969, "outcome": "passed"}, "teardown": {"duration": 9.016600000000263e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_summary_stored_in_cluster", "lineno": 83, "outcome": "passed", "keywords": ["test_summary_stored_in_cluster", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0019768340000000384, "outcome": "passed"}, "call": {"duration": 0.00017062499999997982, "outcome": "passed"}, "teardown": {"duration": 0.00010366699999997397, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_headline_regeneration_on_source_addition", "lineno": 99, "outcome": "passed", "keywords": ["test_headline_regeneration_on_source_addition", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016984580000000138, "outcome": "passed"}, "call": {"duration": 0.00013195799999998759, "outcome": "passed"}, "teardown": {"duration": 8.937500000000265e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestClusteringToSummarizationFlow::test_cost_tracking_for_summarization", "lineno": 122, "outcome": "passed", "keywords": ["test_cost_tracking_for_summarization", "asyncio", "pytestmark", "integration", "TestClusteringToSummarizationFlow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00016737500000002514, "outcome": "passed"}, "call": {"duration": 0.000181874999999998, "outcome": "passed"}, "teardown": {"duration": 9.308299999999381e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_real_time_summarization_flow", "lineno": 146, "outcome": "passed", "keywords": ["test_real_time_summarization_flow", "asyncio", "pytestmark", "integration", "TestSummarizationWorkflow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.002099709000000005, "outcome": "passed"}, "call": {"duration": 0.00011895799999994683, "outcome": "passed"}, "teardown": {"duration": 9.558300000001019e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_batch_summarization_flow", "lineno": 163, "outcome": "failed", "keywords": ["test_batch_summarization_flow", "asyncio", "pytestmark", "integration", "TestSummarizationWorkflow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016856670000000573, "outcome": "passed"}, "call": {"duration": 0.00018116599999995486, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_clustering_to_summarization.py", "lineno": 172, "message": "AssertionError: assert 'anthropic_batch_id' in {'batch_id': 'batch_ant_20251026_001', 'id': 'batch_req_123', 'status': 'submitted', 'story_ids': ['story_1', 'story_2', 'story_3'], ...}"}, "traceback": [{"path": "integration/test_clustering_to_summarization.py", "lineno": 172, "message": "in test_batch_summarization_flow"}], "longrepr": "integration/test_clustering_to_summarization.py:172: in test_batch_summarization_flow\n    assert 'anthropic_batch_id' in batch\nE   AssertionError: assert 'anthropic_batch_id' in {'batch_id': 'batch_ant_20251026_001', 'id': 'batch_req_123', 'status': 'submitted', 'story_ids': ['story_1', 'story_2', 'story_3'], ...}"}, "teardown": {"duration": 0.00011050000000001337, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_batch_result_processing", "lineno": 178, "outcome": "failed", "keywords": ["test_batch_result_processing", "asyncio", "pytestmark", "integration", "TestSummarizationWorkflow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016409169999999085, "outcome": "passed"}, "call": {"duration": 0.0001731670000000296, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_clustering_to_summarization.py", "lineno": 190, "message": "AssertionError: assert 1 == 3\n +  where 1 = len([{'custom_id': 'story_1', 'result': {'type': 'succeeded'}}])"}, "traceback": [{"path": "integration/test_clustering_to_summarization.py", "lineno": 190, "message": "in test_batch_result_processing"}], "longrepr": "integration/test_clustering_to_summarization.py:190: in test_batch_result_processing\n    assert len(successful_results) == 3\nE   AssertionError: assert 1 == 3\nE    +  where 1 = len([{'custom_id': 'story_1', 'result': {'type': 'succeeded'}}])"}, "teardown": {"duration": 0.00010262499999991181, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationWorkflow::test_summary_fallback_on_ai_refusal", "lineno": 194, "outcome": "passed", "keywords": ["test_summary_fallback_on_ai_refusal", "asyncio", "pytestmark", "integration", "TestSummarizationWorkflow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0019412909999999561, "outcome": "passed"}, "call": {"duration": 0.00013695899999999206, "outcome": "passed"}, "teardown": {"duration": 8.71669999999991e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_length_validation", "lineno": 219, "outcome": "failed", "keywords": ["test_summary_length_validation", "asyncio", "pytestmark", "integration", "TestSummarizationQuality", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001642079999999435, "outcome": "passed"}, "call": {"duration": 0.00015262500000001733, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_clustering_to_summarization.py", "lineno": 230, "message": "AssertionError: Summary should have 2-4 sentences\nassert 2 <= 0"}, "traceback": [{"path": "integration/test_clustering_to_summarization.py", "lineno": 230, "message": "in test_summary_length_validation"}], "longrepr": "integration/test_clustering_to_summarization.py:230: in test_summary_length_validation\n    assert 2 <= sentence_count <= 4, \"Summary should have 2-4 sentences\"\nE   AssertionError: Summary should have 2-4 sentences\nE   assert 2 <= 0"}, "teardown": {"duration": 8.47920000000002e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_includes_key_information", "lineno": 231, "outcome": "passed", "keywords": ["test_summary_includes_key_information", "asyncio", "pytestmark", "integration", "TestSummarizationQuality", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00015845799999991694, "outcome": "passed"}, "call": {"duration": 0.00011499999999997623, "outcome": "passed"}, "teardown": {"duration": 7.849999999998136e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationQuality::test_summary_prompt_cache_usage", "lineno": 248, "outcome": "passed", "keywords": ["test_summary_prompt_cache_usage", "asyncio", "pytestmark", "integration", "TestSummarizationQuality", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00013495800000007385, "outcome": "passed"}, "call": {"duration": 0.00010966599999995275, "outcome": "passed"}, "teardown": {"duration": 7.729199999995107e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance::test_batch_vs_realtime_cost", "lineno": 267, "outcome": "passed", "keywords": ["test_batch_vs_realtime_cost", "asyncio", "pytestmark", "integration", "TestSummarizationPerformance", "slow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001431250000000217, "outcome": "passed"}, "call": {"duration": 0.00011658400000003066, "outcome": "passed"}, "teardown": {"duration": 7.891599999998444e-05, "outcome": "passed"}}, {"nodeid": "integration/test_clustering_to_summarization.py::TestSummarizationPerformance::test_summarization_rate_limit", "lineno": 284, "outcome": "passed", "keywords": ["test_summarization_rate_limit", "asyncio", "pytestmark", "integration", "TestSummarizationPerformance", "slow", "test_clustering_to_summarization.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.000132665999999948, "outcome": "passed"}, "call": {"duration": 0.00011204199999992337, "outcome": "passed"}, "teardown": {"duration": 7.816699999996235e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_new_article_creates_new_cluster", "lineno": 27, "outcome": "failed", "keywords": ["test_new_article_creates_new_cluster", "asyncio", "pytestmark", "integration", "TestRSSToClusteringFlow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0015770410000000012, "outcome": "passed"}, "call": {"duration": 0.000385291999999926, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_rss_to_clustering.py", "lineno": 86, "message": "AssertionError: assert 'general' in ['world', 'us', 'tech', 'business', 'sports', 'science', ...]"}, "traceback": [{"path": "integration/test_rss_to_clustering.py", "lineno": 86, "message": "in test_new_article_creates_new_cluster"}], "longrepr": "integration/test_rss_to_clustering.py:86: in test_new_article_creates_new_cluster\n    assert raw_article['category'] in ['world', 'us', 'tech', 'business', 'sports', 'science', 'health']\nE   AssertionError: assert 'general' in ['world', 'us', 'tech', 'business', 'sports', 'science', ...]"}, "teardown": {"duration": 8.824999999990091e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_similar_article_clusters_with_existing", "lineno": 94, "outcome": "failed", "keywords": ["test_similar_article_clusters_with_existing", "asyncio", "pytestmark", "integration", "TestRSSToClusteringFlow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.001794040999999913, "outcome": "passed"}, "call": {"duration": 0.0002550000000000052, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/integration/test_rss_to_clustering.py", "lineno": 128, "message": "AssertionError: Similarity 0.5925925925925926 should be >= 0.7\nassert 0.5925925925925926 >= 0.7"}, "traceback": [{"path": "integration/test_rss_to_clustering.py", "lineno": 128, "message": "in test_similar_article_clusters_with_existing"}], "longrepr": "integration/test_rss_to_clustering.py:128: in test_similar_article_clusters_with_existing\n    assert similarity >= 0.7, f\"Similarity {similarity} should be >= 0.7\"\nE   AssertionError: Similarity 0.5925925925925926 should be >= 0.7\nE   assert 0.5925925925925926 >= 0.7"}, "teardown": {"duration": 9.22909999999666e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_duplicate_source_prevented", "lineno": 132, "outcome": "passed", "keywords": ["test_duplicate_source_prevented", "asyncio", "pytestmark", "integration", "TestRSSToClusteringFlow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016242909999999444, "outcome": "passed"}, "call": {"duration": 0.00012554099999995127, "outcome": "passed"}, "teardown": {"duration": 9.208300000007608e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_cross_category_clustering_prevented", "lineno": 165, "outcome": "passed", "keywords": ["test_cross_category_clustering_prevented", "asyncio", "pytestmark", "integration", "TestRSSToClusteringFlow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0016488329999999607, "outcome": "passed"}, "call": {"duration": 0.0010100000000000664, "outcome": "passed"}, "teardown": {"duration": 9.312500000002721e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSToClusteringFlow::test_entity_based_matching", "lineno": 187, "outcome": "passed", "keywords": ["test_entity_based_matching", "asyncio", "pytestmark", "integration", "TestRSSToClusteringFlow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0019890410000000802, "outcome": "passed"}, "call": {"duration": 0.00016291699999992915, "outcome": "passed"}, "teardown": {"duration": 8.733299999996724e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_full_rss_to_cluster_pipeline", "lineno": 219, "outcome": "passed", "keywords": ["test_full_rss_to_cluster_pipeline", "asyncio", "pytestmark", "integration", "TestRSSProcessingPipeline", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0015495000000000925, "outcome": "passed"}, "call": {"duration": 0.0013719170000000558, "outcome": "passed"}, "teardown": {"duration": 0.00011500000000008725, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_multiple_articles_same_story", "lineno": 258, "outcome": "passed", "keywords": ["test_multiple_articles_same_story", "asyncio", "pytestmark", "integration", "TestRSSProcessingPipeline", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0018540420000000557, "outcome": "passed"}, "call": {"duration": 0.0002883750000000074, "outcome": "passed"}, "teardown": {"duration": 0.00010133400000000847, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSProcessingPipeline::test_story_status_progression", "lineno": 289, "outcome": "passed", "keywords": ["test_story_status_progression", "asyncio", "pytestmark", "integration", "TestRSSProcessingPipeline", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0017288340000000124, "outcome": "passed"}, "call": {"duration": 0.0001375410000000743, "outcome": "passed"}, "teardown": {"duration": 9.412500000005597e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_invalid_feed_handling", "lineno": 319, "outcome": "passed", "keywords": ["test_invalid_feed_handling", "asyncio", "pytestmark", "integration", "TestRSSFeedQuality", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00015245799999996645, "outcome": "passed"}, "call": {"duration": 0.0004305000000000003, "outcome": "passed"}, "teardown": {"duration": 9.124999999998717e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_missing_required_fields", "lineno": 332, "outcome": "passed", "keywords": ["test_missing_required_fields", "asyncio", "pytestmark", "integration", "TestRSSFeedQuality", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0001440420000000664, "outcome": "passed"}, "call": {"duration": 0.0001303329999999825, "outcome": "passed"}, "teardown": {"duration": 0.00013783400000000334, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSFeedQuality::test_html_cleaning_in_pipeline", "lineno": 348, "outcome": "passed", "keywords": ["test_html_cleaning_in_pipeline", "asyncio", "pytestmark", "integration", "TestRSSFeedQuality", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00022929199999999206, "outcome": "passed"}, "call": {"duration": 0.00018137500000003914, "outcome": "passed"}, "teardown": {"duration": 9.86659999999695e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance::test_clustering_100_articles", "lineno": 370, "outcome": "passed", "keywords": ["test_clustering_100_articles", "asyncio", "pytestmark", "integration", "TestRSSClusteringPerformance", "slow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.0018158750000000223, "outcome": "passed"}, "call": {"duration": 0.0011399590000000792, "outcome": "passed"}, "teardown": {"duration": 9.945799999999672e-05, "outcome": "passed"}}, {"nodeid": "integration/test_rss_to_clustering.py::TestRSSClusteringPerformance::test_fuzzy_matching_performance", "lineno": 399, "outcome": "passed", "keywords": ["test_fuzzy_matching_performance", "asyncio", "pytestmark", "integration", "TestRSSClusteringPerformance", "slow", "test_rss_to_clustering.py", "integration/__init__.py", "tests"], "setup": {"duration": 0.00015862499999996782, "outcome": "passed"}, "call": {"duration": 0.04330654100000009, "outcome": "passed"}, "teardown": {"duration": 0.0001515830000000662, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_api_is_reachable", "lineno": 24, "outcome": "passed", "keywords": ["test_api_is_reachable", "TestDeployedAPI", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00021408299999992053, "outcome": "passed"}, "call": {"duration": 0.7285655839999999, "outcome": "passed"}, "teardown": {"duration": 0.00012858299999995992, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_stories_endpoint_returns_data", "lineno": 32, "outcome": "failed", "keywords": ["test_stories_endpoint_returns_data", "TestDeployedAPI", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00019987499999984948, "outcome": "passed"}, "call": {"duration": 0.6914881669999999, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py", "lineno": 37, "message": "AssertionError: Endpoint returned 403\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code"}, "traceback": [{"path": "system/test_deployed_api.py", "lineno": 37, "message": "in test_stories_endpoint_returns_data"}], "longrepr": "system/test_deployed_api.py:37: in test_stories_endpoint_returns_data\n    assert response.status_code == 200, f\"Endpoint returned {response.status_code}\"\nE   AssertionError: Endpoint returned 403\nE   assert 403 == 200\nE    +  where 403 = <Response [403]>.status_code"}, "teardown": {"duration": 0.0001627079999999559, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestDeployedAPI::test_stories_are_recent", "lineno": 52, "outcome": "failed", "keywords": ["test_stories_are_recent", "TestDeployedAPI", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00019462499999978178, "outcome": "passed"}, "call": {"duration": 0.588026208, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py", "lineno": 59, "message": "AssertionError: No stories to check\nassert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "system/test_deployed_api.py", "lineno": 59, "message": "in test_stories_are_recent"}], "longrepr": "system/test_deployed_api.py:59: in test_stories_are_recent\n    assert len(stories) > 0, \"No stories to check\"\nE   AssertionError: No stories to check\nE   assert 0 > 0\nE    +  where 0 = len([])"}, "teardown": {"duration": 0.0001388750000002048, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_articles_are_being_ingested", "lineno": 91, "outcome": "skipped", "keywords": ["test_articles_are_being_ingested", "TestRSSIngestion", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00019266600000023004, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 92, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 9.537499999989763e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_rss_ingestion_rate", "lineno": 120, "outcome": "skipped", "keywords": ["test_rss_ingestion_rate", "TestRSSIngestion", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00016424999999964385, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 121, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 8.454199999974321e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestRSSIngestion::test_multiple_sources_being_ingested", "lineno": 148, "outcome": "skipped", "keywords": ["test_multiple_sources_being_ingested", "TestRSSIngestion", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00015054200000008677, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 149, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 0.00014650000000004937, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestStoryClustering::test_stories_are_being_created", "lineno": 191, "outcome": "skipped", "keywords": ["test_stories_are_being_created", "TestStoryClustering", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00015083299999973931, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 192, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 8.249999999998536e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestStoryClustering::test_stories_have_multiple_sources", "lineno": 216, "outcome": "skipped", "keywords": ["test_stories_have_multiple_sources", "TestStoryClustering", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00015162499999998857, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 217, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 7.9667000000061e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestAISummarization::test_summaries_are_being_generated", "lineno": 263, "outcome": "skipped", "keywords": ["test_summaries_are_being_generated", "TestAISummarization", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00015620900000001825, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 264, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 8.329200000023462e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestAISummarization::test_summary_coverage_rate", "lineno": 289, "outcome": "skipped", "keywords": ["test_summary_coverage_rate", "TestAISummarization", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00020612500000005696, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 290, 'Skipped: Cosmos credentials not set')"}, "teardown": {"duration": 8.533299999990973e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_function_app_is_deployed", "lineno": 338, "outcome": "failed", "keywords": ["test_function_app_is_deployed", "TestAzureFunctions", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.00012691599999969938, "outcome": "passed"}, "call": {"duration": 0.013482042000000138, "outcome": "failed", "crash": {"path": "/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py", "lineno": 349, "message": "Failed: \u274c Function App not reachable: HTTPSConnectionPool(host='newsreel-functions.azurewebsites.net', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x10cddeb50>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known'))"}, "traceback": [{"path": "system/test_deployed_api.py", "lineno": 349, "message": "in test_function_app_is_deployed"}], "longrepr": "../../../../../../Python/3.9/lib/python/site-packages/urllib3/connection.py:174: in _new_conn\n    conn = connection.create_connection(\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/util/connection.py:72: in create_connection\n    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/socket.py:953: in getaddrinfo\n    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\nE   socket.gaierror: [Errno 8] nodename nor servname provided, or not known\n\nDuring handling of the above exception, another exception occurred:\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connectionpool.py:716: in urlopen\n    httplib_response = self._make_request(\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connectionpool.py:404: in _make_request\n    self._validate_conn(conn)\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connectionpool.py:1061: in _validate_conn\n    conn.connect()\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connection.py:363: in connect\n    self.sock = conn = self._new_conn()\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connection.py:186: in _new_conn\n    raise NewConnectionError(\nE   urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPSConnection object at 0x10cddeb50>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known\n\nDuring handling of the above exception, another exception occurred:\n../../../../../../Python/3.9/lib/python/site-packages/requests/adapters.py:486: in send\n    resp = conn.urlopen(\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/connectionpool.py:802: in urlopen\n    retries = retries.increment(\n../../../../../../Python/3.9/lib/python/site-packages/urllib3/util/retry.py:594: in increment\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE   urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='newsreel-functions.azurewebsites.net', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x10cddeb50>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known'))\n\nDuring handling of the above exception, another exception occurred:\nsystem/test_deployed_api.py:345: in test_function_app_is_deployed\n    response = requests.get(function_url, timeout=10)\n../../../../../../Python/3.9/lib/python/site-packages/requests/api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n../../../../../../Python/3.9/lib/python/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n../../../../../../Python/3.9/lib/python/site-packages/requests/sessions.py:589: in request\n    resp = self.send(prep, **send_kwargs)\n../../../../../../Python/3.9/lib/python/site-packages/requests/sessions.py:703: in send\n    r = adapter.send(request, **kwargs)\n../../../../../../Python/3.9/lib/python/site-packages/requests/adapters.py:519: in send\n    raise ConnectionError(e, request=request)\nE   requests.exceptions.ConnectionError: HTTPSConnectionPool(host='newsreel-functions.azurewebsites.net', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x10cddeb50>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known'))\n\nDuring handling of the above exception, another exception occurred:\nsystem/test_deployed_api.py:349: in test_function_app_is_deployed\n    pytest.fail(f\"\u274c Function App not reachable: {e}\")\nE   Failed: \u274c Function App not reachable: HTTPSConnectionPool(host='newsreel-functions.azurewebsites.net', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x10cddeb50>: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known'))"}, "teardown": {"duration": 0.00017250000000013088, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_rss_function_is_running", "lineno": 352, "outcome": "skipped", "keywords": ["test_rss_function_is_running", "TestAzureFunctions", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.0001644170000001388, "outcome": "passed"}, "call": {"duration": 7.999999999963592e-05, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 357, 'Skipped: Requires Application Insights integration')"}, "teardown": {"duration": 8.141700000008356e-05, "outcome": "passed"}}, {"nodeid": "system/test_deployed_api.py::TestAzureFunctions::test_clustering_function_is_running", "lineno": 358, "outcome": "skipped", "keywords": ["test_clustering_function_is_running", "TestAzureFunctions", "system", "system/test_deployed_api.py", "tests"], "setup": {"duration": 0.0001292500000000807, "outcome": "passed"}, "call": {"duration": 6.633299999991848e-05, "outcome": "skipped", "longrepr": "('/Users/davemac/Library/CloudStorage/OneDrive-OneThumSoftware/One Thum Software/Newsreel/Azure/tests/system/test_deployed_api.py', 361, 'Skipped: Requires Application Insights integration')"}, "teardown": {"duration": 7.779199999990993e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_identical_titles_high_similarity", "lineno": 17, "outcome": "passed", "keywords": ["test_identical_titles_high_similarity", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.0001284169999999918, "outcome": "passed"}, "call": {"duration": 7.779200000035402e-05, "outcome": "passed"}, "teardown": {"duration": 7.791700000003843e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_very_similar_titles", "lineno": 23, "outcome": "passed", "keywords": ["test_very_similar_titles", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012616699999989933, "outcome": "passed"}, "call": {"duration": 8.704200000009266e-05, "outcome": "passed"}, "teardown": {"duration": 8.691699999996416e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_related_but_different_titles", "lineno": 30, "outcome": "passed", "keywords": ["test_related_but_different_titles", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.000130540999999873, "outcome": "passed"}, "call": {"duration": 7.037499999995589e-05, "outcome": "passed"}, "teardown": {"duration": 7.545900000005545e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_unrelated_titles_low_similarity", "lineno": 37, "outcome": "passed", "keywords": ["test_unrelated_titles_low_similarity", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012216600000014566, "outcome": "passed"}, "call": {"duration": 7.458299999996143e-05, "outcome": "passed"}, "teardown": {"duration": 7.520799999971572e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_completely_different_titles", "lineno": 44, "outcome": "passed", "keywords": ["test_completely_different_titles", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012354200000030957, "outcome": "passed"}, "call": {"duration": 6.933400000042056e-05, "outcome": "passed"}, "teardown": {"duration": 7.320800000032435e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_with_word_order_change", "lineno": 51, "outcome": "passed", "keywords": ["test_similarity_with_word_order_change", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012979200000007296, "outcome": "passed"}, "call": {"duration": 7.041599999979553e-05, "outcome": "passed"}, "teardown": {"duration": 7.47500000000123e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_case_insensitive", "lineno": 58, "outcome": "passed", "keywords": ["test_similarity_case_insensitive", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012062500000009635, "outcome": "passed"}, "call": {"duration": 7.479099999985195e-05, "outcome": "passed"}, "teardown": {"duration": 7.566599999986323e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTextSimilarity::test_similarity_with_extra_words", "lineno": 65, "outcome": "passed", "keywords": ["test_similarity_with_extra_words", "unit", "TestTextSimilarity", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012475000000033987, "outcome": "passed"}, "call": {"duration": 7.050000000008438e-05, "outcome": "passed"}, "teardown": {"duration": 7.508300000003132e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_crime_vs_health_conflict", "lineno": 78, "outcome": "passed", "keywords": ["test_crime_vs_health_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012445899999979915, "outcome": "passed"}, "call": {"duration": 7.700000000010476e-05, "outcome": "passed"}, "teardown": {"duration": 7.566699999994597e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_politics_vs_sports_conflict", "lineno": 84, "outcome": "passed", "keywords": ["test_politics_vs_sports_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.0001236250000000716, "outcome": "passed"}, "call": {"duration": 7.504200000019168e-05, "outcome": "passed"}, "teardown": {"duration": 7.624999999977788e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_business_vs_weather_conflict", "lineno": 90, "outcome": "passed", "keywords": ["test_business_vs_weather_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012162499999979204, "outcome": "passed"}, "call": {"duration": 7.170899999975333e-05, "outcome": "passed"}, "teardown": {"duration": 7.420899999965869e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_same_topic_no_conflict", "lineno": 96, "outcome": "passed", "keywords": ["test_same_topic_no_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012108299999979977, "outcome": "passed"}, "call": {"duration": 0.00013766600000009177, "outcome": "passed"}, "teardown": {"duration": 7.470800000008992e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_no_topic_keywords_no_conflict", "lineno": 102, "outcome": "passed", "keywords": ["test_no_topic_keywords_no_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012087499999990925, "outcome": "passed"}, "call": {"duration": 7.416600000009765e-05, "outcome": "passed"}, "teardown": {"duration": 7.887500000025582e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_one_topic_vs_none_no_conflict", "lineno": 108, "outcome": "passed", "keywords": ["test_one_topic_vs_none_no_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00013508400000006304, "outcome": "passed"}, "call": {"duration": 7.320800000032435e-05, "outcome": "passed"}, "teardown": {"duration": 8.279200000016473e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestTopicConflictDetection::test_medical_vs_political_conflict", "lineno": 114, "outcome": "passed", "keywords": ["test_medical_vs_political_conflict", "unit", "TestTopicConflictDetection", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012533300000017178, "outcome": "passed"}, "call": {"duration": 7.249999999991985e-05, "outcome": "passed"}, "teardown": {"duration": 7.879099999996697e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds::test_threshold_75_percent", "lineno": 125, "outcome": "passed", "keywords": ["test_threshold_75_percent", "unit", "TestClusteringThresholds", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012366699999999398, "outcome": "passed"}, "call": {"duration": 8.204199999983786e-05, "outcome": "passed"}, "teardown": {"duration": 8.333300000007426e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringThresholds::test_edge_cases_near_threshold", "lineno": 145, "outcome": "passed", "keywords": ["test_edge_cases_near_threshold", "unit", "TestClusteringThresholds", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012654199999984073, "outcome": "passed"}, "call": {"duration": 7.079200000026376e-05, "outcome": "passed"}, "teardown": {"duration": 7.791599999995569e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_exact_match_via_fingerprint", "lineno": 160, "outcome": "passed", "keywords": ["test_exact_match_via_fingerprint", "unit", "TestStoryMatching", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012708400000027709, "outcome": "passed"}, "call": {"duration": 8.379199999986042e-05, "outcome": "passed"}, "teardown": {"duration": 7.795799999987807e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_fuzzy_match_required_for_variations", "lineno": 175, "outcome": "passed", "keywords": ["test_fuzzy_match_required_for_variations", "unit", "TestStoryMatching", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012624999999966136, "outcome": "passed"}, "call": {"duration": 7.374999999987253e-05, "outcome": "passed"}, "teardown": {"duration": 7.804100000008418e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestStoryMatching::test_no_match_for_different_events", "lineno": 184, "outcome": "passed", "keywords": ["test_no_match_for_different_events", "unit", "TestStoryMatching", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012666600000033057, "outcome": "passed"}, "call": {"duration": 7.987499999995151e-05, "outcome": "passed"}, "teardown": {"duration": 9.14999999999111e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_extract_source_from_article_id", "lineno": 199, "outcome": "passed", "keywords": ["test_extract_source_from_article_id", "unit", "TestDuplicateSourcePrevention", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012483400000018463, "outcome": "passed"}, "call": {"duration": 6.34170000002321e-05, "outcome": "passed"}, "teardown": {"duration": 7.883399999997209e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_identify_duplicate_sources_in_cluster", "lineno": 205, "outcome": "passed", "keywords": ["test_identify_duplicate_sources_in_cluster", "unit", "TestDuplicateSourcePrevention", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012629099999994509, "outcome": "passed"}, "call": {"duration": 7.408299999989154e-05, "outcome": "passed"}, "teardown": {"duration": 8.06249999998343e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestDuplicateSourcePrevention::test_unique_sources_only", "lineno": 224, "outcome": "passed", "keywords": ["test_unique_sources_only", "unit", "TestDuplicateSourcePrevention", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012616699999989933, "outcome": "passed"}, "call": {"duration": 6.237500000016993e-05, "outcome": "passed"}, "teardown": {"duration": 7.991599999979115e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance::test_similarity_calculation_is_fast", "lineno": 242, "outcome": "passed", "keywords": ["test_similarity_calculation_is_fast", "unit", "TestClusteringPerformance", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.00012820800000001853, "outcome": "passed"}, "call": {"duration": 0.0008394579999997376, "outcome": "passed"}, "teardown": {"duration": 9.029099999979806e-05, "outcome": "passed"}}, {"nodeid": "unit/test_clustering_logic.py::TestClusteringPerformance::test_topic_conflict_check_is_fast", "lineno": 257, "outcome": "passed", "keywords": ["test_topic_conflict_check_is_fast", "unit", "TestClusteringPerformance", "unit/test_clustering_logic.py", "tests"], "setup": {"duration": 0.0001343330000000975, "outcome": "passed"}, "call": {"duration": 0.006647583999999984, "outcome": "passed"}, "teardown": {"duration": 0.0001181249999997469, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_simple_html", "lineno": 22, "outcome": "passed", "keywords": ["test_clean_simple_html", "unit", "TestHTMLCleaning", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00015358299999990166, "outcome": "passed"}, "call": {"duration": 7.904199999986261e-05, "outcome": "passed"}, "teardown": {"duration": 9.370899999971982e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_nested_html", "lineno": 28, "outcome": "passed", "keywords": ["test_clean_nested_html", "unit", "TestHTMLCleaning", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00018591700000003542, "outcome": "passed"}, "call": {"duration": 8.687500000004178e-05, "outcome": "passed"}, "teardown": {"duration": 8.6458000000178e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_html_entities", "lineno": 34, "outcome": "passed", "keywords": ["test_clean_html_entities", "unit", "TestHTMLCleaning", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00013637499999985536, "outcome": "passed"}, "call": {"duration": 8.029099999973255e-05, "outcome": "passed"}, "teardown": {"duration": 8.341600000028038e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_with_newlines", "lineno": 41, "outcome": "passed", "keywords": ["test_clean_with_newlines", "unit", "TestHTMLCleaning", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00013229099999989558, "outcome": "passed"}, "call": {"duration": 6.766600000007728e-05, "outcome": "passed"}, "teardown": {"duration": 7.716700000015564e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestHTMLCleaning::test_clean_empty_html", "lineno": 48, "outcome": "passed", "keywords": ["test_clean_empty_html", "unit", "TestHTMLCleaning", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001255410000000623, "outcome": "passed"}, "call": {"duration": 7.175000000003706e-05, "outcome": "passed"}, "teardown": {"duration": 7.520799999971572e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_location_entities", "lineno": 59, "outcome": "passed", "keywords": ["test_extract_location_entities", "unit", "TestEntityExtraction", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001236250000000716, "outcome": "passed"}, "call": {"duration": 0.00010033299999978595, "outcome": "passed"}, "teardown": {"duration": 7.554200000026157e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_from_empty_text", "lineno": 71, "outcome": "passed", "keywords": ["test_extract_from_empty_text", "unit", "TestEntityExtraction", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012329200000005258, "outcome": "passed"}, "call": {"duration": 6.200000000022854e-05, "outcome": "passed"}, "teardown": {"duration": 7.616599999993312e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestEntityExtraction::test_extract_with_special_characters", "lineno": 76, "outcome": "passed", "keywords": ["test_extract_with_special_characters", "unit", "TestEntityExtraction", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001305829999997954, "outcome": "passed"}, "call": {"duration": 7.487499999969671e-05, "outcome": "passed"}, "teardown": {"duration": 7.825000000005744e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_tech_article", "lineno": 87, "outcome": "passed", "keywords": ["test_categorize_tech_article", "unit", "TestArticleCategorization", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.000127083999999833, "outcome": "passed"}, "call": {"duration": 9.283399999970854e-05, "outcome": "passed"}, "teardown": {"duration": 7.612500000009348e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_business_article", "lineno": 94, "outcome": "passed", "keywords": ["test_categorize_business_article", "unit", "TestArticleCategorization", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00011966699999987895, "outcome": "passed"}, "call": {"duration": 8.729199999990556e-05, "outcome": "passed"}, "teardown": {"duration": 7.370799999995015e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_health_article", "lineno": 101, "outcome": "passed", "keywords": ["test_categorize_health_article", "unit", "TestArticleCategorization", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001237080000002777, "outcome": "passed"}, "call": {"duration": 8.829200000004533e-05, "outcome": "passed"}, "teardown": {"duration": 7.495899999998556e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_sports_article", "lineno": 108, "outcome": "passed", "keywords": ["test_categorize_sports_article", "unit", "TestArticleCategorization", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001221670000002284, "outcome": "passed"}, "call": {"duration": 8.437500000013642e-05, "outcome": "passed"}, "teardown": {"duration": 7.516599999979334e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestArticleCategorization::test_categorize_fallback_to_general", "lineno": 115, "outcome": "passed", "keywords": ["test_categorize_fallback_to_general", "unit", "TestArticleCategorization", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001240830000002191, "outcome": "passed"}, "call": {"duration": 8.26659999999535e-05, "outcome": "passed"}, "teardown": {"duration": 7.575000000015208e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_detect_product_spam", "lineno": 127, "outcome": "passed", "keywords": ["test_detect_product_spam", "unit", "TestSpamDetection", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.000124082999999775, "outcome": "passed"}, "call": {"duration": 0.00040500000000021075, "outcome": "passed"}, "teardown": {"duration": 8.12080000001103e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_detect_sponsored_content", "lineno": 134, "outcome": "passed", "keywords": ["test_detect_sponsored_content", "unit", "TestSpamDetection", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012720799999987875, "outcome": "passed"}, "call": {"duration": 9.495800000003385e-05, "outcome": "passed"}, "teardown": {"duration": 8.466600000023305e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_legitimate_article_not_spam", "lineno": 141, "outcome": "passed", "keywords": ["test_legitimate_article_not_spam", "unit", "TestSpamDetection", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012695800000006585, "outcome": "passed"}, "call": {"duration": 0.0006920420000002814, "outcome": "passed"}, "teardown": {"duration": 7.48750000001408e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestSpamDetection::test_news_about_products_not_spam", "lineno": 148, "outcome": "passed", "keywords": ["test_news_about_products_not_spam", "unit", "TestSpamDetection", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001281670000001789, "outcome": "passed"}, "call": {"duration": 8.462499999994932e-05, "outcome": "passed"}, "teardown": {"duration": 7.770899999970382e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_long_text", "lineno": 162, "outcome": "passed", "keywords": ["test_truncate_long_text", "unit", "TestTextTruncation", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012504200000007515, "outcome": "passed"}, "call": {"duration": 0.00012416699999961978, "outcome": "passed"}, "teardown": {"duration": 7.462499999988381e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_short_text_unchanged", "lineno": 168, "outcome": "passed", "keywords": ["test_truncate_short_text_unchanged", "unit", "TestTextTruncation", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001233749999998146, "outcome": "passed"}, "call": {"duration": 6.462500000026239e-05, "outcome": "passed"}, "teardown": {"duration": 7.058299999984641e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_at_word_boundary", "lineno": 174, "outcome": "passed", "keywords": ["test_truncate_at_word_boundary", "unit", "TestTextTruncation", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00013083400000013512, "outcome": "passed"}, "call": {"duration": 6.774999999992204e-05, "outcome": "passed"}, "teardown": {"duration": 7.533300000028831e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestTextTruncation::test_truncate_empty_text", "lineno": 181, "outcome": "passed", "keywords": ["test_truncate_empty_text", "unit", "TestTextTruncation", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012183299999968256, "outcome": "passed"}, "call": {"duration": 6.366599999996225e-05, "outcome": "passed"}, "teardown": {"duration": 7.708399999994953e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestIDGeneration::test_generate_article_id", "lineno": 191, "outcome": "passed", "keywords": ["test_generate_article_id", "unit", "TestIDGeneration", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012437499999995438, "outcome": "passed"}, "call": {"duration": 8.549999999996061e-05, "outcome": "passed"}, "teardown": {"duration": 7.579099999999173e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestIDGeneration::test_generate_different_ids_for_different_urls", "lineno": 206, "outcome": "passed", "keywords": ["test_generate_different_ids_for_different_urls", "unit", "TestIDGeneration", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001287500000000108, "outcome": "passed"}, "call": {"duration": 7.341600000021486e-05, "outcome": "passed"}, "teardown": {"duration": 7.483299999977433e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_generate_story_fingerprint", "lineno": 222, "outcome": "passed", "keywords": ["test_generate_story_fingerprint", "unit", "TestStoryFingerprinting", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001292080000001583, "outcome": "passed"}, "call": {"duration": 7.050000000008438e-05, "outcome": "passed"}, "teardown": {"duration": 7.495899999998556e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_consistency", "lineno": 237, "outcome": "passed", "keywords": ["test_fingerprint_consistency", "unit", "TestStoryFingerprinting", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001271670000000391, "outcome": "passed"}, "call": {"duration": 7.145899999994043e-05, "outcome": "passed"}, "teardown": {"duration": 7.3208999999963e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_different_for_different_titles", "lineno": 246, "outcome": "passed", "keywords": ["test_fingerprint_different_for_different_titles", "unit", "TestStoryFingerprinting", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012270900000022067, "outcome": "passed"}, "call": {"duration": 7.087500000002578e-05, "outcome": "passed"}, "teardown": {"duration": 7.558299999965712e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestStoryFingerprinting::test_fingerprint_normalizes_case", "lineno": 256, "outcome": "passed", "keywords": ["test_fingerprint_normalizes_case", "unit", "TestStoryFingerprinting", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.0001225000000002474, "outcome": "passed"}, "call": {"duration": 6.90000000003188e-05, "outcome": "passed"}, "teardown": {"duration": 7.862499999999883e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestDateParsing::test_parse_rfc822_date", "lineno": 271, "outcome": "passed", "keywords": ["test_parse_rfc822_date", "unit", "TestDateParsing", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012412500000014148, "outcome": "passed"}, "call": {"duration": 7.866599999983848e-05, "outcome": "passed"}, "teardown": {"duration": 7.591600000012022e-05, "outcome": "passed"}}, {"nodeid": "unit/test_rss_parsing.py::TestDateParsing::test_parse_missing_date_returns_now", "lineno": 284, "outcome": "passed", "keywords": ["test_parse_missing_date_returns_now", "unit", "TestDateParsing", "unit/test_rss_parsing.py", "tests"], "setup": {"duration": 0.00012770799999994864, "outcome": "passed"}, "call": {"duration": 7.245799999999747e-05, "outcome": "passed"}, "teardown": {"duration": 0.00043729199999997803, "outcome": "passed"}}], "warnings": [{"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_config.py", "lineno": 271}, {"message": "`json_encoders` is deprecated. See https://docs.pydantic.dev/2.5/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/Users/davemac/Library/Python/3.9/lib/python/site-packages/pydantic/_internal/_generate_schema.py", "lineno": 252}]}